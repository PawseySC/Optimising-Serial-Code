%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /software/projects/pawsey0001/espinosa/pawseyTraining/Optimising-Serial-Code/profiling/matrix.f90
Compiled : 05/01/23  18:10:05
Compiler : Version 14.0.3
Ftnlx    : Version 14.0.3 
Target   : x86-64
Command  : ftn_driver.exe -hcpu=x86-milan -hnetwork=ofi -hdynamic
           -D__CRAY_X86_MILAN -D__CRAYXT_COMPUTE_LINUX_TARGET
           -I/opt/cray/pe/perftools/22.09.0/include -DCRAYPAT -hpat_trace
           -hlist=m -c -O2 matrix.f90
           -I/opt/cray/pe/cce/14.0.3/cce-clang/x86_64/lib/clang/14.0.6/include
           -I/opt/cray/pe/cce/14.0.3/cce/x86_64/include/craylibs -I/usr/include
           -I/opt/cray/pe/libsci/22.08.1.1/CRAY/9.0/x86_64/include
           -I/opt/cray/pe/mpich/8.1.19/ofi/cray/10.0/include
           -I/opt/cray/pe/dsmml/0.2.2/dsmml//include
           -I/opt/cray/xpmem/2.4.4-2.3_13.8__gff0e1d9.shasta/include
           -I/usr/include
Program
  Units  : TIMEIT
          MATRIX

ftnlx report
------------
Source   : /software/projects/pawsey0001/espinosa/pawseyTraining/Optimising-Serial-Code/profiling/matrix.f90
Date     : 05/01/2023  18:10:08


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


     %%%    L o o p m a r k   L e g e n d    %%%

     Primary Loop Type        Modifiers
     ------- ---- ----        ---------
     A - Pattern matched      a - atomic memory operation
                              b - blocked
     C - Collapsed            c - conditional and/or computed
     D - Deleted               
     E - Cloned                
     F - Flat - No calls      f - fused
     G - Accelerated          g - partitioned
     I - Inlined              i - interchanged
     M - Multithreaded        m - partitioned
                              n - non-blocking remote transfer
                              p - partial
     R - Rerolling            r - unrolled
                              s - shortloop
     V - Vectorized           w - unwound

     + - More messages listed at end of listing
     ------------------------------------------


    1.                      module timeit
    2.                      
    3.                        implicit none
    4.                        integer, parameter :: dp = kind(1.d0)
    5.                      contains
    6.                      
    7.                      subroutine time_all(n,iters)
    8.                        integer :: i
    9.                        integer,dimension(8) :: ut1,ut2
   10.                        real :: t1, t2, etime
   11.                        real(dp), allocatable :: A(:, :), B(:, :)
   12.                        real(dp), allocatable :: C(:, :)
   13.                        integer, intent(in) :: n,iters
   14.                        character(len=32), dimension(5) :: methods
   15.                        real(dp), dimension(5) :: ctimes
   16.                        real(dp), dimension(5) :: etimes
   17.                      
   18.                        write(*,*)
   19.                        write(*,'(a16,i10)') "Matrix size:",n
   20.                        write(*,'(a16,i10)') "Iterations:",iters
   21.                      
   22.                        allocate(A(n, n), B(n, n), C(n, n))
   23.  + C--------------<>   call random_number(A)
   24.  + C--------------<>   call random_number(B)
   25.                      
   26.                        !Testing matmul1 (dgemm)
   27.                        call cpu_time(t1)
   28.                        call date_and_time(values=ut1)
   29.  + 1---------------<   do i = 1, iters
   30.  + 1 E------------<>       call matmul1(A,B,C)
   31.    1--------------->   end do
   32.                        call cpu_time(t2)
   33.                        call date_and_time(values=ut2)
   34.                        methods(1)="External dgemm"
   35.                        ctimes(1)=t2-t1
   36.    I                   etimes(1)=elapsedtime(ut1,ut2)
   37.                      
   38.                        !Testing matmul2 (intrinsic matmul)
   39.                        call cpu_time(t1)
   40.                        call date_and_time(values=ut1)
   41.  + F                   do i = 1, iters
   42.    F A I----------<>       call matmul2(A,B,C)
   43.    F--------------->   end do
   44.                        call cpu_time(t2)
   45.                        call date_and_time(values=ut2)
   46.                        methods(2)="Intrinsic matmul"
   47.                        ctimes(2)=t2-t1
   48.    I                   etimes(2)=elapsedtime(ut1,ut2)
   49.                      
   50.                        !Testing matmul3 (manual looping)
   51.                        call cpu_time(t1)
   52.                        call date_and_time(values=ut1)
   53.  + F                   do i = 1, iters
   54.    F Vpr4 I-------<>       call matmul3(A,B,C)
   55.    F--------------->   end do
   56.                        call cpu_time(t2)
   57.                        call date_and_time(values=ut2)
   58.                        methods(3)="Manual loops v1"
   59.                        ctimes(3)=t2-t1
   60.    I                   etimes(3)=elapsedtime(ut1,ut2)
   61.                      
   62.                        !Testing matmul4 (manual looping)
   63.                        call cpu_time(t1)
   64.                        call date_and_time(values=ut1)
   65.  + F                   do i = 1, iters
   66.    F Vpr4 I-------<>       call matmul4(A,B,C)
   67.    F--------------->   end do
   68.                        call cpu_time(t2)
   69.                        call date_and_time(values=ut2)
   70.                        methods(4)="Manual loops V2"
   71.                        ctimes(4)=t2-t1
   72.    I                   etimes(4)=elapsedtime(ut1,ut2)
   73.                      
   74.                        !Testing matmul5 (manual looping)
   75.                        call cpu_time(t1)
   76.                        call date_and_time(values=ut1)
   77.  + F                   do i = 1, iters
   78.    F A I----------<>       call matmul5(A,B,C)
   79.    F--------------->   end do
   80.                        call cpu_time(t2)
   81.                        call date_and_time(values=ut2)
   82.                        methods(5)="Manual loops V3"
   83.                        ctimes(5)=t2-t1
   84.    I                   etimes(5)=elapsedtime(ut1,ut2)
   85.                      
   86.  + I                   call printtimes(methods,ctimes,etimes,5)
   87.                      
   88.                        deallocate(A)
   89.                        deallocate(B)
   90.                        deallocate(C)
   91.                      end subroutine
   92.                      
   93.                      subroutine test_matmul1(n,iters)
   94.                        integer :: i
   95.                        integer,dimension(8) :: ut1,ut2
   96.                        real :: t1, t2, etime
   97.                        real(dp), allocatable :: A(:, :), B(:, :)
   98.                        real(dp), allocatable :: C(:, :)
   99.                        integer, intent(in) :: n,iters
  100.                        character(len=32), dimension(5) :: methods
  101.                        real(dp), dimension(5) :: ctimes
  102.                        real(dp), dimension(5) :: etimes
  103.                      
  104.                        write(*,*)
  105.                        write(*,'(a16,i10)') "Matrix size:",n
  106.                        write(*,'(a16,i10)') "Iterations:",iters
  107.                      
  108.                        allocate(A(n, n), B(n, n), C(n, n))
  109.  + C--------------<>   call random_number(A)
  110.  + C--------------<>   call random_number(B)
  111.                      
  112.                        !Testing matmul1 (dgemm)
  113.                        call cpu_time(t1)
  114.                        call date_and_time(values=ut1)
  115.  + 1---------------<   do i = 1, iters
  116.  + 1 E------------<>       call matmul1(A,B,C)
  117.    1--------------->   end do
  118.                        call cpu_time(t2)
  119.                        call date_and_time(values=ut2)
  120.                        methods(1)="External dgemm"
  121.                        ctimes(1)=t2-t1
  122.    I                   etimes(1)=elapsedtime(ut1,ut2)
  123.    w I------------<>   call printtimes(methods,ctimes,etimes,1)
  124.                      
  125.                        deallocate(A)
  126.                        deallocate(B)
  127.                        deallocate(C)
  128.                      end subroutine
  129.                      
  130.                      subroutine test_matmul2(n,iters)
  131.                        integer :: i
  132.                        integer,dimension(8) :: ut1,ut2
  133.                        real :: t1, t2, etime
  134.                        real(dp), allocatable :: A(:, :), B(:, :)
  135.                        real(dp), allocatable :: C(:, :)
  136.                        integer, intent(in) :: n,iters
  137.                        character(len=32), dimension(5) :: methods
  138.                        real(dp), dimension(5) :: ctimes
  139.                        real(dp), dimension(5) :: etimes
  140.                      
  141.                        write(*,*)
  142.                        write(*,'(a16,i10)') "Matrix size:",n
  143.                        write(*,'(a16,i10)') "Iterations:",iters
  144.                      
  145.                        allocate(A(n, n), B(n, n), C(n, n))
  146.  + C--------------<>   call random_number(A)
  147.  + C--------------<>   call random_number(B)
  148.                      
  149.                        !Testing matmul2 (intrinsic matmul)
  150.                        call cpu_time(t1)
  151.                        call date_and_time(values=ut1)
  152.  + F                   do i = 1, iters
  153.    F A I----------<>       call matmul2(A,B,C)
  154.    F--------------->   end do
  155.                        call cpu_time(t2)
  156.                        call date_and_time(values=ut2)
  157.                        methods(1)="Intrinsic matmul"
  158.                        ctimes(1)=t2-t1
  159.    I                   etimes(1)=elapsedtime(ut1,ut2)
  160.    w I------------<>   call printtimes(methods,ctimes,etimes,1)
  161.                      
  162.                        deallocate(A)
  163.                        deallocate(B)
  164.                        deallocate(C)
  165.                      end subroutine
  166.                      
  167.                      subroutine test_matmul3(n,iters)
  168.                        integer :: i
  169.                        integer,dimension(8) :: ut1,ut2
  170.                        real :: t1, t2, etime
  171.                        real(dp), allocatable :: A(:, :), B(:, :)
  172.                        real(dp), allocatable :: C(:, :)
  173.                        integer, intent(in) :: n,iters
  174.                        character(len=32), dimension(5) :: methods
  175.                        real(dp), dimension(5) :: ctimes
  176.                        real(dp), dimension(5) :: etimes
  177.                      
  178.                        write(*,*)
  179.                        write(*,'(a16,i10)') "Matrix size:",n
  180.                        write(*,'(a16,i10)') "Iterations:",iters
  181.                      
  182.                        allocate(A(n, n), B(n, n), C(n, n))
  183.  + C--------------<>   call random_number(A)
  184.  + C--------------<>   call random_number(B)
  185.                      
  186.                        !Testing matmul3 (manual looping)
  187.                        call cpu_time(t1)
  188.                        call date_and_time(values=ut1)
  189.  + F                   do i = 1, iters
  190.    F Vpr4 I-------<>       call matmul3(A,B,C)
  191.    F--------------->   end do
  192.                        call cpu_time(t2)
  193.                        call date_and_time(values=ut2)
  194.                        methods(1)="Manual loops V1"
  195.                        ctimes(1)=t2-t1
  196.    I                   etimes(1)=elapsedtime(ut1,ut2)
  197.    w I------------<>   call printtimes(methods,ctimes,etimes,1)
  198.                      
  199.                        deallocate(A)
  200.                        deallocate(B)
  201.                        deallocate(C)
  202.                      end subroutine
  203.                      
  204.                      subroutine test_matmul4(n,iters)
  205.                        integer :: i
  206.                        integer,dimension(8) :: ut1,ut2
  207.                        real :: t1, t2, etime
  208.                        real(dp), allocatable :: A(:, :), B(:, :)
  209.                        real(dp), allocatable :: C(:, :)
  210.                        integer, intent(in) :: n,iters
  211.                        character(len=32), dimension(5) :: methods
  212.                        real(dp), dimension(5) :: ctimes
  213.                        real(dp), dimension(5) :: etimes
  214.                      
  215.                        write(*,*)
  216.                        write(*,'(a16,i10)') "Matrix size:",n
  217.                        write(*,'(a16,i10)') "Iterations:",iters
  218.                      
  219.                        allocate(A(n, n), B(n, n), C(n, n))
  220.  + C--------------<>   call random_number(A)
  221.  + C--------------<>   call random_number(B)
  222.                      
  223.                        !Testing matmul4 (manual looping)
  224.                        call cpu_time(t1)
  225.                        call date_and_time(values=ut1)
  226.  + F                   do i = 1, iters
  227.    F Vpr4 I-------<>       call matmul4(A,B,C)
  228.    F--------------->   end do
  229.                        call cpu_time(t2)
  230.                        call date_and_time(values=ut2)
  231.                        methods(1)="Manual loops V2"
  232.                        ctimes(1)=t2-t1
  233.    I                   etimes(1)=elapsedtime(ut1,ut2)
  234.    w I------------<>   call printtimes(methods,ctimes,etimes,1)
  235.                      
  236.                        deallocate(A)
  237.                        deallocate(B)
  238.                        deallocate(C)
  239.                      end subroutine
  240.                      
  241.                      subroutine test_matmul5(n,iters)
  242.                        integer :: i
  243.                        integer,dimension(8) :: ut1,ut2
  244.                        real :: t1, t2, etime
  245.                        real(dp), allocatable :: A(:, :), B(:, :)
  246.                        real(dp), allocatable :: C(:, :)
  247.                        integer, intent(in) :: n,iters
  248.                        character(len=32), dimension(5) :: methods
  249.                        real(dp), dimension(5) :: ctimes
  250.                        real(dp), dimension(5) :: etimes
  251.                      
  252.                        write(*,*)
  253.                        write(*,'(a16,i10)') "Matrix size:",n
  254.                        write(*,'(a16,i10)') "Iterations:",iters
  255.                      
  256.                        allocate(A(n, n), B(n, n), C(n, n))
  257.  + C--------------<>   call random_number(A)
  258.  + C--------------<>   call random_number(B)
  259.                      
  260.                        !Testing matmul5 (manual looping)
  261.                        call cpu_time(t1)
  262.                        call date_and_time(values=ut1)
  263.  + F                   do i = 1, iters
  264.    F A I----------<>       call matmul5(A,B,C)
  265.    F--------------->   end do
  266.                        call cpu_time(t2)
  267.                        call date_and_time(values=ut2)
  268.                        methods(1)="Manual loops V3"
  269.                        ctimes(1)=t2-t1
  270.    I                   etimes(1)=elapsedtime(ut1,ut2)
  271.    w I------------<>   call printtimes(methods,ctimes,etimes,1)
  272.                      
  273.                        deallocate(A)
  274.                        deallocate(B)
  275.                        deallocate(C)
  276.                      end subroutine
  277.                      
  278.                      real(dp) function elapsedtime(starttime,stoptime)
  279.                        integer, dimension(8), intent(in) :: starttime,stoptime
  280.                        elapsedtime=(stoptime(5)*3600._dp+stoptime(6)*60._dp+real(stoptime(7),kind=dp)+stoptime(8)/1000._dp)- &
  281.                             (starttime(5)*3600._dp+starttime(6)*60._dp+real(starttime(7),kind=dp)+starttime(8)/1000._dp)
  282.                      end function
  283.                      
  284.                      subroutine printtimes(methods,ctimes,etimes,n_methods)
  285.                        integer, intent(in) :: n_methods
  286.                        character(len=*), dimension(n_methods), intent(in) :: methods
  287.                        real(dp),dimension(n_methods), intent(in) :: ctimes
  288.                        real(dp),dimension(n_methods), intent(in) :: etimes
  289.                        integer :: i
  290.                        write(*,'(a16)',advance='no')    "Method:"
  291.  + 1---------------<   do i=1,n_methods
  292.    1                      write(*,'(a22)',advance='no')    trim(methods(i))
  293.    1--------------->   end do
  294.                        write(*,*) ''
  295.                        write(*,'(a16)',advance='no') "CPU time:"
  296.  + 1---------------<   do i=1,n_methods
  297.    1                      write(*,'(f20.3,a2)',advance='no') ctimes(i), " s"
  298.    1--------------->   end do
  299.                        write(*,*) ''
  300.                        write(*,'(a16)',advance='no') "Elapsed time:"
  301.  + 1---------------<   do i=1,n_methods
  302.    1                      write(*,'(f20.3,a2)',advance='no') etimes(i), " s"
  303.    1--------------->   end do
  304.                        write(*,*) ''
  305.                      end subroutine
  306.                      
  307.                      subroutine matmul1(A,B,C) !Using dgemm
  308.                        integer :: n
  309.                        real(dp), intent(out) :: C(:, :)
  310.                        real(dp), intent(in) :: A(:, :), B(:, :)
  311.                        external :: dgemm
  312.                        n = size(A,1)
  313.  +                     call dgemm('N', 'N', n, n, n, 1.0_dp, A, n, B, n, 0.0_dp, C, n);
  314.                      end subroutine
  315.                      
  316.                      subroutine matmul2(A,B,C) !Using matmul
  317.                        real(dp), intent(out) :: C(:, :)
  318.                        real(dp), intent(in) :: A(:, :), B(:, :)
  319.    Vpr4-----------<>   C = matmul(A, B)
  320.                      end subroutine
  321.                      
  322.                      subroutine matmul3(A,B,C) !Manual loops V1 (Similar to dgemm logic)
  323.                        real(dp), intent(out) :: C(:, :)
  324.                        real(dp), intent(in) :: A(:, :), B(:, :)
  325.                        integer :: i,j,k,l,n
  326.                        real(dp) :: tmp
  327.                        n = size(A,1)
  328.                      
  329.  + 1---------------<   do j=1,n
  330.    1 Vcr2----------<     do l=1,n
  331.    1 Vcr2                  C(l,j)=0.0_dp
  332.    1 Vcr2---------->     end do
  333.    1                 
  334.  + 1 2-------------<     do k=1,n
  335.    1 2                     tmp=B(k,j)
  336.    1 2 Vcr2--------<       do i=1,n
  337.    1 2 Vcr2                  C(i,j)=C(i,j)+tmp*A(i,k)
  338.    1 2 Vcr2-------->       end do
  339.    1 2------------->     end do
  340.    1--------------->   end do
  341.                      end subroutine
  342.                      
  343.                      subroutine matmul4(A,B,C) !Manual loops V2 (Not using tmp outside the i loop)
  344.                        real(dp), intent(out) :: C(:, :)
  345.                        real(dp), intent(in) :: A(:, :), B(:, :)
  346.                        integer :: i,j,k,l,n
  347.                        n = size(A,1)
  348.                      
  349.  + 1---------------<   do j=1,n
  350.    1 Vcr2----------<     do l=1,n
  351.    1 Vcr2                  C(l,j)=0.0_dp
  352.    1 Vcr2---------->     end do
  353.    1                 
  354.  + 1 r4------------<     do k=1,n
  355.    1 r4 Vpr2-------<       do i=1,n
  356.    1 r4 Vpr2                 C(i,j)=C(i,j)+B(k,j)*A(i,k)
  357.    1 r4 Vpr2------->       end do
  358.    1 r4------------>     end do
  359.    1--------------->   end do
  360.                      end subroutine
  361.                      
  362.                      subroutine matmul5(A,B,C) !Manual loops V3 (Not using initialization loop for C)
  363.                        real(dp), intent(out) :: C(:, :)
  364.                        real(dp), intent(in) :: A(:, :), B(:, :)
  365.                        integer :: i,j,k,n
  366.                        n = size(A,1)
  367.                      
  368.  + 1---------------<   do j=1,n
  369.    1 iVpr2---------<     do i=1,n
  370.    1 iVpr2                 C(i,j)=0.0_dp
  371.  + 1 iVpr2 ir4-----<       do k=1,n
  372.    1 iVpr2 ir4                C(i,j)=C(i,j)+B(k,j)*A(i,k)
  373.    1 iVpr2 ir4----->       end do
  374.    1 iVpr2--------->     end do
  375.    1--------------->   end do
  376.                      end subroutine
  377.                      
  378.                      end module

ftn-6066 ftn: SCALAR TIME_ALL, File = matrix.f90, Line = 23 
   A loop nest at line 23 collapsed to a single loop.

ftn-6332 ftn: VECTOR TIME_ALL, File = matrix.f90, Line = 23 
  A loop starting at line 23 was not vectorized because it does not map well onto the target architecture.

ftn-6066 ftn: SCALAR TIME_ALL, File = matrix.f90, Line = 24 
   A loop nest at line 24 collapsed to a single loop.

ftn-6332 ftn: VECTOR TIME_ALL, File = matrix.f90, Line = 24 
  A loop starting at line 24 was not vectorized because it does not map well onto the target architecture.

ftn-6262 ftn: VECTOR TIME_ALL, File = matrix.f90, Line = 29 
  A loop starting at line 29 was not vectorized because it contains a call to a subroutine or function on line 30.

ftn-3058 ftn: IPA TIME_ALL, File = matrix.f90, Line = 30 
  "matmul1$timeit__clone_213017_1682935805_1"(/software/projects/pawsey0001/espinosa/pawseyTraining/Optimising-Serial-Code/profiling/matrix.f90:307) was called because there are multiple arguments with identical TKR.

ftn-3118 ftn: IPA TIME_ALL, File = matrix.f90, Line = 30 
  "matmul1"(/software/projects/pawsey0001/espinosa/pawseyTraining/Optimising-Serial-Code/profiling/matrix.f90:307) not flattened because "dgemm" is missing.

ftn-3001 ftn: IPA TIME_ALL, File = matrix.f90, Line = 36 
  Leaf "elapsedtime"(/software/projects/pawsey0001/espinosa/pawseyTraining/Optimising-Serial-Code/profiling/matrix.f90:278) was inlined.

ftn-3182 ftn: IPA TIME_ALL, File = matrix.f90, Line = 41 
  Loop has been flattened.

ftn-6262 ftn: VECTOR TIME_ALL, File = matrix.f90, Line = 41 
  A loop starting at line 41 was not vectorized because it contains a call to a subroutine or function on line 42.

ftn-3001 ftn: IPA TIME_ALL, File = matrix.f90, Line = 42 
  Leaf "matmul2"(/software/projects/pawsey0001/espinosa/pawseyTraining/Optimising-Serial-Code/profiling/matrix.f90:316) was inlined.

ftn-6202 ftn: VECTOR TIME_ALL, File = matrix.f90, Line = 42 
  A loop starting at line 42 was replaced by a library call.

ftn-3001 ftn: IPA TIME_ALL, File = matrix.f90, Line = 48 
  Leaf "elapsedtime"(/software/projects/pawsey0001/espinosa/pawseyTraining/Optimising-Serial-Code/profiling/matrix.f90:278) was inlined.

ftn-3182 ftn: IPA TIME_ALL, File = matrix.f90, Line = 53 
  Loop has been flattened.

ftn-6254 ftn: VECTOR TIME_ALL, File = matrix.f90, Line = 53 
  A loop starting at line 53 was not vectorized because a recurrence was found on "c" at line 54.

ftn-3001 ftn: IPA TIME_ALL, File = matrix.f90, Line = 54 
  Leaf "matmul3"(/software/projects/pawsey0001/espinosa/pawseyTraining/Optimising-Serial-Code/profiling/matrix.f90:322) was inlined.

ftn-6005 ftn: SCALAR TIME_ALL, File = matrix.f90, Line = 54 
  A loop starting at line 54 was unrolled 4 times.

ftn-6217 ftn: VECTOR TIME_ALL, File = matrix.f90, Line = 54 
  A loop starting at line 54 was partially and conditionally vectorized.

ftn-3001 ftn: IPA TIME_ALL, File = matrix.f90, Line = 60 
  Leaf "elapsedtime"(/software/projects/pawsey0001/espinosa/pawseyTraining/Optimising-Serial-Code/profiling/matrix.f90:278) was inlined.

ftn-3182 ftn: IPA TIME_ALL, File = matrix.f90, Line = 65 
  Loop has been flattened.

ftn-6254 ftn: VECTOR TIME_ALL, File = matrix.f90, Line = 65 
  A loop starting at line 65 was not vectorized because a recurrence was found on "c" at line 66.

ftn-3001 ftn: IPA TIME_ALL, File = matrix.f90, Line = 66 
  Leaf "matmul4"(/software/projects/pawsey0001/espinosa/pawseyTraining/Optimising-Serial-Code/profiling/matrix.f90:343) was inlined.

ftn-6005 ftn: SCALAR TIME_ALL, File = matrix.f90, Line = 66 
  A loop starting at line 66 was unrolled 4 times.

ftn-6217 ftn: VECTOR TIME_ALL, File = matrix.f90, Line = 66 
  A loop starting at line 66 was partially and conditionally vectorized.

ftn-3001 ftn: IPA TIME_ALL, File = matrix.f90, Line = 72 
  Leaf "elapsedtime"(/software/projects/pawsey0001/espinosa/pawseyTraining/Optimising-Serial-Code/profiling/matrix.f90:278) was inlined.

ftn-3182 ftn: IPA TIME_ALL, File = matrix.f90, Line = 77 
  Loop has been flattened.

ftn-6262 ftn: VECTOR TIME_ALL, File = matrix.f90, Line = 77 
  A loop starting at line 77 was not vectorized because it contains a call to a subroutine or function on line 78.

ftn-3001 ftn: IPA TIME_ALL, File = matrix.f90, Line = 78 
  Leaf "matmul5"(/software/projects/pawsey0001/espinosa/pawseyTraining/Optimising-Serial-Code/profiling/matrix.f90:362) was inlined.

ftn-6202 ftn: VECTOR TIME_ALL, File = matrix.f90, Line = 78 
  A loop starting at line 78 was replaced by a library call.

ftn-3001 ftn: IPA TIME_ALL, File = matrix.f90, Line = 84 
  Leaf "elapsedtime"(/software/projects/pawsey0001/espinosa/pawseyTraining/Optimising-Serial-Code/profiling/matrix.f90:278) was inlined.

ftn-3001 ftn: IPA TIME_ALL, File = matrix.f90, Line = 86 
  Leaf "printtimes"(/software/projects/pawsey0001/espinosa/pawseyTraining/Optimising-Serial-Code/profiling/matrix.f90:284) was inlined because argument 4 is a constant.

ftn-6286 ftn: VECTOR TIME_ALL, File = matrix.f90, Line = 86 
  A loop starting at line 86 was not vectorized because it contains input/output operations at line 86.

ftn-6066 ftn: SCALAR TEST_MATMUL1, File = matrix.f90, Line = 109 
   A loop nest at line 109 collapsed to a single loop.

ftn-6332 ftn: VECTOR TEST_MATMUL1, File = matrix.f90, Line = 109 
  A loop starting at line 109 was not vectorized because it does not map well onto the target architecture.

ftn-6066 ftn: SCALAR TEST_MATMUL1, File = matrix.f90, Line = 110 
   A loop nest at line 110 collapsed to a single loop.

ftn-6332 ftn: VECTOR TEST_MATMUL1, File = matrix.f90, Line = 110 
  A loop starting at line 110 was not vectorized because it does not map well onto the target architecture.

ftn-6262 ftn: VECTOR TEST_MATMUL1, File = matrix.f90, Line = 115 
  A loop starting at line 115 was not vectorized because it contains a call to a subroutine or function on line 116.

ftn-3058 ftn: IPA TEST_MATMUL1, File = matrix.f90, Line = 116 
  "matmul1$timeit__clone_213017_1682935806_2"(/software/projects/pawsey0001/espinosa/pawseyTraining/Optimising-Serial-Code/profiling/matrix.f90:307) was called because there are multiple arguments with identical TKR.

ftn-3118 ftn: IPA TEST_MATMUL1, File = matrix.f90, Line = 116 
  "matmul1"(/software/projects/pawsey0001/espinosa/pawseyTraining/Optimising-Serial-Code/profiling/matrix.f90:307) not flattened because "dgemm" is missing.

ftn-3001 ftn: IPA TEST_MATMUL1, File = matrix.f90, Line = 122 
  Leaf "elapsedtime"(/software/projects/pawsey0001/espinosa/pawseyTraining/Optimising-Serial-Code/profiling/matrix.f90:278) was inlined.

ftn-3001 ftn: IPA TEST_MATMUL1, File = matrix.f90, Line = 123 
  Leaf "printtimes"(/software/projects/pawsey0001/espinosa/pawseyTraining/Optimising-Serial-Code/profiling/matrix.f90:284) was inlined because argument 4 is a constant.

ftn-6008 ftn: SCALAR TEST_MATMUL1, File = matrix.f90, Line = 123 
  A loop starting at line 123 was unwound.

ftn-6066 ftn: SCALAR TEST_MATMUL2, File = matrix.f90, Line = 146 
   A loop nest at line 146 collapsed to a single loop.

ftn-6332 ftn: VECTOR TEST_MATMUL2, File = matrix.f90, Line = 146 
  A loop starting at line 146 was not vectorized because it does not map well onto the target architecture.

ftn-6066 ftn: SCALAR TEST_MATMUL2, File = matrix.f90, Line = 147 
   A loop nest at line 147 collapsed to a single loop.

ftn-6332 ftn: VECTOR TEST_MATMUL2, File = matrix.f90, Line = 147 
  A loop starting at line 147 was not vectorized because it does not map well onto the target architecture.

ftn-3182 ftn: IPA TEST_MATMUL2, File = matrix.f90, Line = 152 
  Loop has been flattened.

ftn-6262 ftn: VECTOR TEST_MATMUL2, File = matrix.f90, Line = 152 
  A loop starting at line 152 was not vectorized because it contains a call to a subroutine or function on line 153.

ftn-3001 ftn: IPA TEST_MATMUL2, File = matrix.f90, Line = 153 
  Leaf "matmul2"(/software/projects/pawsey0001/espinosa/pawseyTraining/Optimising-Serial-Code/profiling/matrix.f90:316) was inlined.

ftn-6202 ftn: VECTOR TEST_MATMUL2, File = matrix.f90, Line = 153 
  A loop starting at line 153 was replaced by a library call.

ftn-3001 ftn: IPA TEST_MATMUL2, File = matrix.f90, Line = 159 
  Leaf "elapsedtime"(/software/projects/pawsey0001/espinosa/pawseyTraining/Optimising-Serial-Code/profiling/matrix.f90:278) was inlined.

ftn-3001 ftn: IPA TEST_MATMUL2, File = matrix.f90, Line = 160 
  Leaf "printtimes"(/software/projects/pawsey0001/espinosa/pawseyTraining/Optimising-Serial-Code/profiling/matrix.f90:284) was inlined because argument 4 is a constant.

ftn-6008 ftn: SCALAR TEST_MATMUL2, File = matrix.f90, Line = 160 
  A loop starting at line 160 was unwound.

ftn-6066 ftn: SCALAR TEST_MATMUL3, File = matrix.f90, Line = 183 
   A loop nest at line 183 collapsed to a single loop.

ftn-6332 ftn: VECTOR TEST_MATMUL3, File = matrix.f90, Line = 183 
  A loop starting at line 183 was not vectorized because it does not map well onto the target architecture.

ftn-6066 ftn: SCALAR TEST_MATMUL3, File = matrix.f90, Line = 184 
   A loop nest at line 184 collapsed to a single loop.

ftn-6332 ftn: VECTOR TEST_MATMUL3, File = matrix.f90, Line = 184 
  A loop starting at line 184 was not vectorized because it does not map well onto the target architecture.

ftn-3182 ftn: IPA TEST_MATMUL3, File = matrix.f90, Line = 189 
  Loop has been flattened.

ftn-6254 ftn: VECTOR TEST_MATMUL3, File = matrix.f90, Line = 189 
  A loop starting at line 189 was not vectorized because a recurrence was found on "c" at line 190.

ftn-3001 ftn: IPA TEST_MATMUL3, File = matrix.f90, Line = 190 
  Leaf "matmul3"(/software/projects/pawsey0001/espinosa/pawseyTraining/Optimising-Serial-Code/profiling/matrix.f90:322) was inlined.

ftn-6005 ftn: SCALAR TEST_MATMUL3, File = matrix.f90, Line = 190 
  A loop starting at line 190 was unrolled 4 times.

ftn-6217 ftn: VECTOR TEST_MATMUL3, File = matrix.f90, Line = 190 
  A loop starting at line 190 was partially and conditionally vectorized.

ftn-3001 ftn: IPA TEST_MATMUL3, File = matrix.f90, Line = 196 
  Leaf "elapsedtime"(/software/projects/pawsey0001/espinosa/pawseyTraining/Optimising-Serial-Code/profiling/matrix.f90:278) was inlined.

ftn-3001 ftn: IPA TEST_MATMUL3, File = matrix.f90, Line = 197 
  Leaf "printtimes"(/software/projects/pawsey0001/espinosa/pawseyTraining/Optimising-Serial-Code/profiling/matrix.f90:284) was inlined because argument 4 is a constant.

ftn-6008 ftn: SCALAR TEST_MATMUL3, File = matrix.f90, Line = 197 
  A loop starting at line 197 was unwound.

ftn-6066 ftn: SCALAR TEST_MATMUL4, File = matrix.f90, Line = 220 
   A loop nest at line 220 collapsed to a single loop.

ftn-6332 ftn: VECTOR TEST_MATMUL4, File = matrix.f90, Line = 220 
  A loop starting at line 220 was not vectorized because it does not map well onto the target architecture.

ftn-6066 ftn: SCALAR TEST_MATMUL4, File = matrix.f90, Line = 221 
   A loop nest at line 221 collapsed to a single loop.

ftn-6332 ftn: VECTOR TEST_MATMUL4, File = matrix.f90, Line = 221 
  A loop starting at line 221 was not vectorized because it does not map well onto the target architecture.

ftn-3182 ftn: IPA TEST_MATMUL4, File = matrix.f90, Line = 226 
  Loop has been flattened.

ftn-6254 ftn: VECTOR TEST_MATMUL4, File = matrix.f90, Line = 226 
  A loop starting at line 226 was not vectorized because a recurrence was found on "c" at line 227.

ftn-3001 ftn: IPA TEST_MATMUL4, File = matrix.f90, Line = 227 
  Leaf "matmul4"(/software/projects/pawsey0001/espinosa/pawseyTraining/Optimising-Serial-Code/profiling/matrix.f90:343) was inlined.

ftn-6005 ftn: SCALAR TEST_MATMUL4, File = matrix.f90, Line = 227 
  A loop starting at line 227 was unrolled 4 times.

ftn-6217 ftn: VECTOR TEST_MATMUL4, File = matrix.f90, Line = 227 
  A loop starting at line 227 was partially and conditionally vectorized.

ftn-3001 ftn: IPA TEST_MATMUL4, File = matrix.f90, Line = 233 
  Leaf "elapsedtime"(/software/projects/pawsey0001/espinosa/pawseyTraining/Optimising-Serial-Code/profiling/matrix.f90:278) was inlined.

ftn-3001 ftn: IPA TEST_MATMUL4, File = matrix.f90, Line = 234 
  Leaf "printtimes"(/software/projects/pawsey0001/espinosa/pawseyTraining/Optimising-Serial-Code/profiling/matrix.f90:284) was inlined because argument 4 is a constant.

ftn-6008 ftn: SCALAR TEST_MATMUL4, File = matrix.f90, Line = 234 
  A loop starting at line 234 was unwound.

ftn-6066 ftn: SCALAR TEST_MATMUL5, File = matrix.f90, Line = 257 
   A loop nest at line 257 collapsed to a single loop.

ftn-6332 ftn: VECTOR TEST_MATMUL5, File = matrix.f90, Line = 257 
  A loop starting at line 257 was not vectorized because it does not map well onto the target architecture.

ftn-6066 ftn: SCALAR TEST_MATMUL5, File = matrix.f90, Line = 258 
   A loop nest at line 258 collapsed to a single loop.

ftn-6332 ftn: VECTOR TEST_MATMUL5, File = matrix.f90, Line = 258 
  A loop starting at line 258 was not vectorized because it does not map well onto the target architecture.

ftn-3182 ftn: IPA TEST_MATMUL5, File = matrix.f90, Line = 263 
  Loop has been flattened.

ftn-6262 ftn: VECTOR TEST_MATMUL5, File = matrix.f90, Line = 263 
  A loop starting at line 263 was not vectorized because it contains a call to a subroutine or function on line 264.

ftn-3001 ftn: IPA TEST_MATMUL5, File = matrix.f90, Line = 264 
  Leaf "matmul5"(/software/projects/pawsey0001/espinosa/pawseyTraining/Optimising-Serial-Code/profiling/matrix.f90:362) was inlined.

ftn-6202 ftn: VECTOR TEST_MATMUL5, File = matrix.f90, Line = 264 
  A loop starting at line 264 was replaced by a library call.

ftn-3001 ftn: IPA TEST_MATMUL5, File = matrix.f90, Line = 270 
  Leaf "elapsedtime"(/software/projects/pawsey0001/espinosa/pawseyTraining/Optimising-Serial-Code/profiling/matrix.f90:278) was inlined.

ftn-3001 ftn: IPA TEST_MATMUL5, File = matrix.f90, Line = 271 
  Leaf "printtimes"(/software/projects/pawsey0001/espinosa/pawseyTraining/Optimising-Serial-Code/profiling/matrix.f90:284) was inlined because argument 4 is a constant.

ftn-6008 ftn: SCALAR TEST_MATMUL5, File = matrix.f90, Line = 271 
  A loop starting at line 271 was unwound.

ftn-6286 ftn: VECTOR PRINTTIMES, File = matrix.f90, Line = 291 
  A loop starting at line 291 was not vectorized because it contains input/output operations at line 292.

ftn-6286 ftn: VECTOR PRINTTIMES, File = matrix.f90, Line = 296 
  A loop starting at line 296 was not vectorized because it contains input/output operations at line 297.

ftn-6286 ftn: VECTOR PRINTTIMES, File = matrix.f90, Line = 301 
  A loop starting at line 301 was not vectorized because it contains input/output operations at line 302.

ftn-3021 ftn: IPA MATMUL1, File = matrix.f90, Line = 313 
  "dgemm" was not inlined because the compiler was unable to locate the routine.

ftn-6005 ftn: SCALAR MATMUL2, File = matrix.f90, Line = 319 
  A loop starting at line 319 was unrolled 4 times.

ftn-6217 ftn: VECTOR MATMUL2, File = matrix.f90, Line = 319 
  A loop starting at line 319 was partially and conditionally vectorized.

ftn-6294 ftn: VECTOR MATMUL3, File = matrix.f90, Line = 329 
  A loop starting at line 329 was not vectorized because a better candidate was found at line 330.

ftn-6005 ftn: SCALAR MATMUL3, File = matrix.f90, Line = 330 
  A loop starting at line 330 was unrolled 2 times.

ftn-6213 ftn: VECTOR MATMUL3, File = matrix.f90, Line = 330 
  A loop starting at line 330 was conditionally vectorized.

ftn-6254 ftn: VECTOR MATMUL3, File = matrix.f90, Line = 334 
  A loop starting at line 334 was not vectorized because a recurrence was found on "c" at line 337.

ftn-6005 ftn: SCALAR MATMUL3, File = matrix.f90, Line = 336 
  A loop starting at line 336 was unrolled 2 times.

ftn-6213 ftn: VECTOR MATMUL3, File = matrix.f90, Line = 336 
  A loop starting at line 336 was conditionally vectorized.

ftn-6294 ftn: VECTOR MATMUL4, File = matrix.f90, Line = 349 
  A loop starting at line 349 was not vectorized because a better candidate was found at line 350.

ftn-6005 ftn: SCALAR MATMUL4, File = matrix.f90, Line = 350 
  A loop starting at line 350 was unrolled 2 times.

ftn-6213 ftn: VECTOR MATMUL4, File = matrix.f90, Line = 350 
  A loop starting at line 350 was conditionally vectorized.

ftn-6254 ftn: VECTOR MATMUL4, File = matrix.f90, Line = 354 
  A loop starting at line 354 was not vectorized because a recurrence was found on "c" at line 356.

ftn-6005 ftn: SCALAR MATMUL4, File = matrix.f90, Line = 354 
  A loop starting at line 354 was unrolled 4 times.

ftn-6005 ftn: SCALAR MATMUL4, File = matrix.f90, Line = 355 
  A loop starting at line 355 was unrolled 2 times.

ftn-6217 ftn: VECTOR MATMUL4, File = matrix.f90, Line = 355 
  A loop starting at line 355 was partially and conditionally vectorized.

ftn-6294 ftn: VECTOR MATMUL5, File = matrix.f90, Line = 368 
  A loop starting at line 368 was not vectorized because a better candidate was found at line 369.

ftn-6007 ftn: SCALAR MATMUL5, File = matrix.f90, Line = 369 
  A loop starting at line 369 was interchanged with the loop starting at line 371.

ftn-6005 ftn: SCALAR MATMUL5, File = matrix.f90, Line = 369 
  A loop starting at line 369 was unrolled 2 times.

ftn-6217 ftn: VECTOR MATMUL5, File = matrix.f90, Line = 369 
  A loop starting at line 369 was partially and conditionally vectorized.

ftn-6254 ftn: VECTOR MATMUL5, File = matrix.f90, Line = 371 
  A loop starting at line 371 was not vectorized because a recurrence was found on "c" at line 372.

ftn-6005 ftn: SCALAR MATMUL5, File = matrix.f90, Line = 371 
  A loop starting at line 371 was unrolled 4 times.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  379.                      
  380.                      program matrix
  381.                      
  382.                        use timeit
  383.                        implicit none
  384.                        integer :: matrix_size,n_iter
  385.                      
  386.                      !  integer, parameter :: dp = kind(1.d0)
  387.                      
  388.                      !matrix_size=1000
  389.                      !n_iter=1
  390.                      !call time_all(matrix_size,n_iter)
  391.                      !matrix_size=20
  392.                      !n_iter=1000000
  393.                      !call time_all(matrix_size,n_iter)
  394.                      !matrix_size=3
  395.                      !n_iter=10000000
  396.                      !call time_all(matrix_size,n_iter)
  397.                      
  398.                      matrix_size=1000
  399.                      n_iter=1
  400.  +                   call test_matmul1(matrix_size,n_iter)
  401.  +                   call test_matmul2(matrix_size,n_iter)
  402.  +                   call test_matmul3(matrix_size,n_iter)
  403.  +                   call test_matmul4(matrix_size,n_iter)
  404.  +                   call test_matmul5(matrix_size,n_iter)
  405.                      
  406.                      !####################################################################
  407.                      !End of executable statements.
  408.                      !####################################################################
  409.                      end program matrix

ftn-3165 ftn: IPA MATRIX, File = matrix.f90, Line = 400 
  "test_matmul1"(/software/projects/pawsey0001/espinosa/pawseyTraining/Optimising-Serial-Code/profiling/matrix.f90:93) was not inlined because of deferred implementation - ALLOCATE encountered in callee.

ftn-3165 ftn: IPA MATRIX, File = matrix.f90, Line = 401 
  "test_matmul2"(/software/projects/pawsey0001/espinosa/pawseyTraining/Optimising-Serial-Code/profiling/matrix.f90:130) was not inlined because of deferred implementation - ALLOCATE encountered in callee.

ftn-3165 ftn: IPA MATRIX, File = matrix.f90, Line = 402 
  "test_matmul3"(/software/projects/pawsey0001/espinosa/pawseyTraining/Optimising-Serial-Code/profiling/matrix.f90:167) was not inlined because of deferred implementation - ALLOCATE encountered in callee.

ftn-3165 ftn: IPA MATRIX, File = matrix.f90, Line = 403 
  "test_matmul4"(/software/projects/pawsey0001/espinosa/pawseyTraining/Optimising-Serial-Code/profiling/matrix.f90:204) was not inlined because of deferred implementation - ALLOCATE encountered in callee.

ftn-3165 ftn: IPA MATRIX, File = matrix.f90, Line = 404 
  "test_matmul5"(/software/projects/pawsey0001/espinosa/pawseyTraining/Optimising-Serial-Code/profiling/matrix.f90:241) was not inlined because of deferred implementation - ALLOCATE encountered in callee.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /software/projects/pawsey0001/espinosa/pawseyTraining/Optimising-Serial-Code/compiler_reports/matrix.f90
Compiled : 05/01/23  13:02:52
Compiler : Version 14.0.3
Ftnlx    : Version 14.0.3 
Target   : x86-64
Command  : ftn_driver.exe -hcpu=x86-milan -hnetwork=ofi -hdynamic
           -D__CRAY_X86_MILAN -D__CRAYXT_COMPUTE_LINUX_TARGET -O1 -hlist=m
           -omatrix.O1 matrix.f90
           -I/opt/cray/pe/cce/14.0.3/cce-clang/x86_64/lib/clang/14.0.6/include
           -I/opt/cray/pe/cce/14.0.3/cce/x86_64/include/craylibs -I/usr/include
           -L/opt/cray/pe/gcc/10.3.0/snos/lib64
           -I/opt/cray/pe/libsci/22.08.1.1/CRAY/9.0/x86_64/include
           -I/opt/cray/pe/mpich/8.1.19/ofi/cray/10.0/include
           -I/opt/cray/pe/dsmml/0.2.2/dsmml//include
           -I/opt/cray/xpmem/2.4.4-2.3_13.8__gff0e1d9.shasta/include
           -L/opt/cray/pe/libsci/22.08.1.1/CRAY/9.0/x86_64/lib
           -L/opt/cray/pe/mpich/8.1.19/ofi/cray/10.0/lib
           -L/opt/cray/pe/dsmml/0.2.2/dsmml//lib
           -L/opt/cray/pe/cce/14.0.3/cce/x86_64/lib/pkgconfig/../
           -L/opt/gcc/10.3.0/snos/lib64 -L/opt/cray/pe/gcc/10.3.0/snos/lib64
           -L/opt/cray/pe/cce/14.0.3/cce/x86_64/lib/pkgconfig/../
           -L/opt/cray/xpmem/2.4.4-2.3_13.8__gff0e1d9.shasta/lib64 -ldl -lxpmem
           -lquadmath -lmodules -lfi -lcraymath -lf -lu -lcsup -I/usr/include
           -lstdc++ -lpthread
           -L/opt/cray/pe/cce/14.0.3/cce-clang/x86_64/lib/clang/14.0.6/lib/linux
           -lclang_rt.builtins-x86_64
Program
  Units  : TIMEIT
          MATRIX

ftnlx report
------------
Source   : /software/projects/pawsey0001/espinosa/pawseyTraining/Optimising-Serial-Code/compiler_reports/matrix.f90
Date     : 05/01/2023  13:02:54


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


     %%%    L o o p m a r k   L e g e n d    %%%

     Primary Loop Type        Modifiers
     ------- ---- ----        ---------
     A - Pattern matched      a - atomic memory operation
                              b - blocked
     C - Collapsed            c - conditional and/or computed
     D - Deleted               
     E - Cloned                
     F - Flat - No calls      f - fused
     G - Accelerated          g - partitioned
     I - Inlined              i - interchanged
     M - Multithreaded        m - partitioned
                              n - non-blocking remote transfer
                              p - partial
     R - Rerolling            r - unrolled
                              s - shortloop
     V - Vectorized           w - unwound

     + - More messages listed at end of listing
     ------------------------------------------


    1.                 module timeit
    2.                 
    3.                   implicit none
    4.                   integer, parameter :: dp = kind(1.d0)
    5.                 contains
    6.                 
    7.                 subroutine time_all(n,iters)
    8.                   integer :: i
    9.                   integer,dimension(8) :: ut1,ut2
   10.                   real :: t1, t2, etime
   11.                   real(dp), allocatable :: A(:, :), B(:, :)
   12.                   real(dp), allocatable :: C(:, :)
   13.                   integer, intent(in) :: n,iters
   14.                   character(len=32), dimension(5) :: methods
   15.                   character(len=32), dimension(5) :: info
   16.                   real(dp), dimension(5) :: ctimes
   17.                   real(dp), dimension(5) :: etimes
   18.                 
   19.                   write(*,*)
   20.                   write(*,'(a16,i10)') "Matrix size:",n
   21.                   write(*,'(a16,i10)') "Iterations:",iters
   22.                 
   23.                   allocate(A(n, n), B(n, n), C(n, n))
   24.  + C---------<>   call random_number(A)
   25.  + C---------<>   call random_number(B)
   26.                 
   27.                   !Testing matmul1 (dgemm)
   28.                   call cpu_time(t1)
   29.                   call date_and_time(values=ut1)
   30.  + 1----------<   do i = 1, iters
   31.    1                  call matmul1(A,B,C)
   32.    1---------->   end do
   33.                   call cpu_time(t2)
   34.                   call date_and_time(values=ut2)
   35.                   methods(1)="matmul1"
   36.                   info(1)="External dgemm"
   37.                   ctimes(1)=t2-t1
   38.                   etimes(1)=elapsedtime(ut1,ut2)
   39.                 
   40.                   !Testing matmul2 (intrinsic matmul)
   41.                   call cpu_time(t1)
   42.                   call date_and_time(values=ut1)
   43.  + 1----------<   do i = 1, iters
   44.    1                  call matmul2(A,B,C)
   45.    1---------->   end do
   46.                   call cpu_time(t2)
   47.                   call date_and_time(values=ut2)
   48.                   methods(2)="matmul2"
   49.                   info(2)="Fortran matmul"
   50.                   ctimes(2)=t2-t1
   51.                   etimes(2)=elapsedtime(ut1,ut2)
   52.                 
   53.                   !Testing matmul3 (manual looping)
   54.                   call cpu_time(t1)
   55.                   call date_and_time(values=ut1)
   56.  + 1----------<   do i = 1, iters
   57.    1                  call matmul3(A,B,C)
   58.    1---------->   end do
   59.                   call cpu_time(t2)
   60.                   call date_and_time(values=ut2)
   61.                   methods(3)="matmul3"
   62.                   info(3)="Using loops V3"
   63.                   ctimes(3)=t2-t1
   64.                   etimes(3)=elapsedtime(ut1,ut2)
   65.                 
   66.                   !Testing matmul4 (manual looping)
   67.                   call cpu_time(t1)
   68.                   call date_and_time(values=ut1)
   69.  + 1----------<   do i = 1, iters
   70.    1                  call matmul4(A,B,C)
   71.    1---------->   end do
   72.                   call cpu_time(t2)
   73.                   call date_and_time(values=ut2)
   74.                   methods(4)="matmul4"
   75.                   info(4)="Using loops V4"
   76.                   ctimes(4)=t2-t1
   77.                   etimes(4)=elapsedtime(ut1,ut2)
   78.                 
   79.                   !Testing matmul5 (manual looping)
   80.                   call cpu_time(t1)
   81.                   call date_and_time(values=ut1)
   82.  + 1----------<   do i = 1, iters
   83.    1                  call matmul5(A,B,C)
   84.    1---------->   end do
   85.                   call cpu_time(t2)
   86.                   call date_and_time(values=ut2)
   87.                   methods(5)="matmul5"
   88.                   info(5)="Using loops V5"
   89.                   ctimes(5)=t2-t1
   90.                   etimes(5)=elapsedtime(ut1,ut2)
   91.                 
   92.                   call printtimes(methods,info,ctimes,etimes,5)
   93.                 
   94.                   deallocate(A)
   95.                   deallocate(B)
   96.                   deallocate(C)
   97.                 end subroutine
   98.                 
   99.                 subroutine test_matmul1(n,iters)
  100.                   integer :: i
  101.                   integer,dimension(8) :: ut1,ut2
  102.                   real :: t1, t2, etime
  103.                   real(dp), allocatable :: A(:, :), B(:, :)
  104.                   real(dp), allocatable :: C(:, :)
  105.                   integer, intent(in) :: n,iters
  106.                   character(len=32), dimension(5) :: methods
  107.                   character(len=32), dimension(5) :: info
  108.                   real(dp), dimension(5) :: ctimes
  109.                   real(dp), dimension(5) :: etimes
  110.                 
  111.                   write(*,*)
  112.                   write(*,'(a16,i10)') "Matrix size:",n
  113.                   write(*,'(a16,i10)') "Iterations:",iters
  114.                 
  115.                   allocate(A(n, n), B(n, n), C(n, n))
  116.  + C---------<>   call random_number(A)
  117.  + C---------<>   call random_number(B)
  118.                 
  119.                   !Testing matmul1 (dgemm)
  120.                   call cpu_time(t1)
  121.                   call date_and_time(values=ut1)
  122.  + 1----------<   do i = 1, iters
  123.    1                  call matmul1(A,B,C)
  124.    1---------->   end do
  125.                   call cpu_time(t2)
  126.                   call date_and_time(values=ut2)
  127.                   methods(1)="matmul1"
  128.                   info(1)="External dgemm"
  129.                   ctimes(1)=t2-t1
  130.                   etimes(1)=elapsedtime(ut1,ut2)
  131.                   call printtimes(methods,info,ctimes,etimes,1)
  132.                 
  133.                   deallocate(A)
  134.                   deallocate(B)
  135.                   deallocate(C)
  136.                 end subroutine
  137.                 
  138.                 subroutine test_matmul2(n,iters)
  139.                   integer :: i
  140.                   integer,dimension(8) :: ut1,ut2
  141.                   real :: t1, t2, etime
  142.                   real(dp), allocatable :: A(:, :), B(:, :)
  143.                   real(dp), allocatable :: C(:, :)
  144.                   integer, intent(in) :: n,iters
  145.                   character(len=32), dimension(5) :: methods
  146.                   character(len=32), dimension(5) :: info
  147.                   real(dp), dimension(5) :: ctimes
  148.                   real(dp), dimension(5) :: etimes
  149.                 
  150.                   write(*,*)
  151.                   write(*,'(a16,i10)') "Matrix size:",n
  152.                   write(*,'(a16,i10)') "Iterations:",iters
  153.                 
  154.                   allocate(A(n, n), B(n, n), C(n, n))
  155.  + C---------<>   call random_number(A)
  156.  + C---------<>   call random_number(B)
  157.                 
  158.                   !Testing matmul2 (intrinsic matmul)
  159.                   call cpu_time(t1)
  160.                   call date_and_time(values=ut1)
  161.  + 1----------<   do i = 1, iters
  162.    1                  call matmul2(A,B,C)
  163.    1---------->   end do
  164.                   call cpu_time(t2)
  165.                   call date_and_time(values=ut2)
  166.                   methods(1)="matmul2"
  167.                   info(1)="Fortran matmul"
  168.                   ctimes(1)=t2-t1
  169.                   etimes(1)=elapsedtime(ut1,ut2)
  170.                   call printtimes(methods,info,ctimes,etimes,1)
  171.                 
  172.                   deallocate(A)
  173.                   deallocate(B)
  174.                   deallocate(C)
  175.                 end subroutine
  176.                 
  177.                 subroutine test_matmul3(n,iters)
  178.                   integer :: i
  179.                   integer,dimension(8) :: ut1,ut2
  180.                   real :: t1, t2, etime
  181.                   real(dp), allocatable :: A(:, :), B(:, :)
  182.                   real(dp), allocatable :: C(:, :)
  183.                   integer, intent(in) :: n,iters
  184.                   character(len=32), dimension(5) :: methods
  185.                   character(len=32), dimension(5) :: info
  186.                   real(dp), dimension(5) :: ctimes
  187.                   real(dp), dimension(5) :: etimes
  188.                 
  189.                   write(*,*)
  190.                   write(*,'(a16,i10)') "Matrix size:",n
  191.                   write(*,'(a16,i10)') "Iterations:",iters
  192.                 
  193.                   allocate(A(n, n), B(n, n), C(n, n))
  194.  + C---------<>   call random_number(A)
  195.  + C---------<>   call random_number(B)
  196.                 
  197.                   !Testing matmul3 (manual looping)
  198.                   call cpu_time(t1)
  199.                   call date_and_time(values=ut1)
  200.  + 1----------<   do i = 1, iters
  201.    1                  call matmul3(A,B,C)
  202.    1---------->   end do
  203.                   call cpu_time(t2)
  204.                   call date_and_time(values=ut2)
  205.                   methods(1)="matmul3"
  206.                   info(1)="Using loops V3"
  207.                   ctimes(1)=t2-t1
  208.                   etimes(1)=elapsedtime(ut1,ut2)
  209.                   call printtimes(methods,info,ctimes,etimes,1)
  210.                 
  211.                   deallocate(A)
  212.                   deallocate(B)
  213.                   deallocate(C)
  214.                 end subroutine
  215.                 
  216.                 subroutine test_matmul4(n,iters)
  217.                   integer :: i
  218.                   integer,dimension(8) :: ut1,ut2
  219.                   real :: t1, t2, etime
  220.                   real(dp), allocatable :: A(:, :), B(:, :)
  221.                   real(dp), allocatable :: C(:, :)
  222.                   integer, intent(in) :: n,iters
  223.                   character(len=32), dimension(5) :: methods
  224.                   character(len=32), dimension(5) :: info
  225.                   real(dp), dimension(5) :: ctimes
  226.                   real(dp), dimension(5) :: etimes
  227.                 
  228.                   write(*,*)
  229.                   write(*,'(a16,i10)') "Matrix size:",n
  230.                   write(*,'(a16,i10)') "Iterations:",iters
  231.                 
  232.                   allocate(A(n, n), B(n, n), C(n, n))
  233.  + C---------<>   call random_number(A)
  234.  + C---------<>   call random_number(B)
  235.                 
  236.                   !Testing matmul4 (manual looping)
  237.                   call cpu_time(t1)
  238.                   call date_and_time(values=ut1)
  239.  + 1----------<   do i = 1, iters
  240.    1                  call matmul4(A,B,C)
  241.    1---------->   end do
  242.                   call cpu_time(t2)
  243.                   call date_and_time(values=ut2)
  244.                   methods(1)="matmul4"
  245.                   info(1)="Using loops V4"
  246.                   ctimes(1)=t2-t1
  247.                   etimes(1)=elapsedtime(ut1,ut2)
  248.                   call printtimes(methods,info,ctimes,etimes,1)
  249.                 
  250.                   deallocate(A)
  251.                   deallocate(B)
  252.                   deallocate(C)
  253.                 end subroutine
  254.                 
  255.                 subroutine test_matmul5(n,iters)
  256.                   integer :: i
  257.                   integer,dimension(8) :: ut1,ut2
  258.                   real :: t1, t2, etime
  259.                   real(dp), allocatable :: A(:, :), B(:, :)
  260.                   real(dp), allocatable :: C(:, :)
  261.                   integer, intent(in) :: n,iters
  262.                   character(len=32), dimension(5) :: methods
  263.                   character(len=32), dimension(5) :: info
  264.                   real(dp), dimension(5) :: ctimes
  265.                   real(dp), dimension(5) :: etimes
  266.                 
  267.                   write(*,*)
  268.                   write(*,'(a16,i10)') "Matrix size:",n
  269.                   write(*,'(a16,i10)') "Iterations:",iters
  270.                 
  271.                   allocate(A(n, n), B(n, n), C(n, n))
  272.  + C---------<>   call random_number(A)
  273.  + C---------<>   call random_number(B)
  274.                 
  275.                   !Testing matmul5 (manual looping)
  276.                   call cpu_time(t1)
  277.                   call date_and_time(values=ut1)
  278.  + 1----------<   do i = 1, iters
  279.    1                  call matmul5(A,B,C)
  280.    1---------->   end do
  281.                   call cpu_time(t2)
  282.                   call date_and_time(values=ut2)
  283.                   methods(1)="matmul5"
  284.                   info(1)="Using loops V5"
  285.                   ctimes(1)=t2-t1
  286.                   etimes(1)=elapsedtime(ut1,ut2)
  287.                   call printtimes(methods,info,ctimes,etimes,1)
  288.                 
  289.                   deallocate(A)
  290.                   deallocate(B)
  291.                   deallocate(C)
  292.                 end subroutine
  293.                 
  294.                 real(dp) function elapsedtime(starttime,stoptime)
  295.                   integer, dimension(8), intent(in) :: starttime,stoptime
  296.                   elapsedtime=(stoptime(5)*3600._dp+stoptime(6)*60._dp+real(stoptime(7),kind=dp)+stoptime(8)/1000._dp)- &
  297.                        (starttime(5)*3600._dp+starttime(6)*60._dp+real(starttime(7),kind=dp)+starttime(8)/1000._dp)
  298.                 end function
  299.                 
  300.                 subroutine printtimes(methods,info,ctimes,etimes,n_methods)
  301.                   integer, intent(in) :: n_methods
  302.                   character(len=*), dimension(n_methods), intent(in) :: methods
  303.                   character(len=*), dimension(n_methods), intent(in) :: info
  304.                   real(dp),dimension(n_methods), intent(in) :: ctimes
  305.                   real(dp),dimension(n_methods), intent(in) :: etimes
  306.                   integer :: i
  307.                   write(*,'(a16)',advance='no')    "Method:"
  308.  + 1----------<   do i=1,n_methods
  309.    1                 write(*,'(a22)',advance='no')    trim(methods(i))
  310.    1---------->   end do
  311.                   write(*,*) ''
  312.                   write(*,'(a16)',advance='no')    "Info:"
  313.  + 1----------<   do i=1,n_methods
  314.    1                 write(*,'(a22)',advance='no')    trim(info(i))
  315.    1---------->   end do
  316.                   write(*,*) ''
  317.                   write(*,'(a16)',advance='no') "CPU time:"
  318.  + 1----------<   do i=1,n_methods
  319.    1                 write(*,'(f20.3,a2)',advance='no') ctimes(i), " s"
  320.    1---------->   end do
  321.                   write(*,*) ''
  322.                   write(*,'(a16)',advance='no') "Elapsed time:"
  323.  + 1----------<   do i=1,n_methods
  324.    1                 write(*,'(f20.3,a2)',advance='no') etimes(i), " s"
  325.    1---------->   end do
  326.                   write(*,*) ''
  327.                 end subroutine
  328.                 
  329.                 subroutine matmul1(A,B,C) !Using dgemm
  330.                   integer :: n
  331.                   real(dp), intent(out) :: C(:, :)
  332.                   real(dp), intent(in) :: A(:, :), B(:, :)
  333.                   external :: dgemm
  334.                   n = size(A,1)
  335.  +                call dgemm('N', 'N', n, n, n, 1.0_dp, A, n, B, n, 0.0_dp, C, n);
  336.                 end subroutine
  337.                 
  338.                 subroutine matmul2(A,B,C) !Using matmul
  339.                   real(dp), intent(out) :: C(:, :)
  340.                   real(dp), intent(in) :: A(:, :), B(:, :)
  341.  + r4--------<>   C = matmul(A, B)
  342.                 end subroutine
  343.                 
  344.                 subroutine matmul3(A,B,C) !Manual loops V3 (Similar to dgemm logic)
  345.                   real(dp), intent(out) :: C(:, :)
  346.                   real(dp), intent(in) :: A(:, :), B(:, :)
  347.                   integer :: i,j,k,l,n
  348.                   real(dp) :: tmp
  349.                   n = size(A,1)
  350.                 
  351.  + 1----------<   do j=1,n
  352.  + 1 r8-------<     do l=1,n
  353.    1 r8               C(l,j)=0.0_dp
  354.    1 r8------->     end do
  355.    1            
  356.  + 1 2--------<     do k=1,n
  357.    1 2                tmp=B(k,j)
  358.  + 1 2 r8-----<       do i=1,n
  359.    1 2 r8               C(i,j)=C(i,j)+tmp*A(i,k)
  360.    1 2 r8----->       end do
  361.    1 2-------->     end do
  362.    1---------->   end do
  363.                 end subroutine
  364.                 
  365.                 subroutine matmul4(A,B,C) !Manual loops V4 (Not using tmp outside the i loop)
  366.                   real(dp), intent(out) :: C(:, :)
  367.                   real(dp), intent(in) :: A(:, :), B(:, :)
  368.                   integer :: i,j,k,l,n
  369.                   n = size(A,1)
  370.                 
  371.  + 1----------<   do j=1,n
  372.  + 1 r8-------<     do l=1,n
  373.    1 r8               C(l,j)=0.0_dp
  374.    1 r8------->     end do
  375.    1            
  376.  + 1 r4-------<     do k=1,n
  377.  + 1 r4 r8----<       do i=1,n
  378.    1 r4 r8              C(i,j)=C(i,j)+B(k,j)*A(i,k)
  379.    1 r4 r8---->       end do
  380.    1 r4------->     end do
  381.    1---------->   end do
  382.                 end subroutine
  383.                 
  384.                 subroutine matmul5(A,B,C) !Manual loops V5 (Not using initialization loop for C)
  385.                   real(dp), intent(out) :: C(:, :)
  386.                   real(dp), intent(in) :: A(:, :), B(:, :)
  387.                   integer :: i,j,k,n
  388.                   n = size(A,1)
  389.                 
  390.  + 1----------<   do j=1,n
  391.  + 1 ir8------<     do i=1,n
  392.    1 ir8              C(i,j)=0.0_dp
  393.  + 1 ir8 ir4--<       do k=1,n
  394.    1 ir8 ir4             C(i,j)=C(i,j)+B(k,j)*A(i,k)
  395.    1 ir8 ir4-->       end do
  396.    1 ir8------>     end do
  397.    1---------->   end do
  398.                 end subroutine
  399.                 
  400.                 end module

ftn-6066 ftn: SCALAR TIME_ALL, File = matrix.f90, Line = 24 
   A loop nest at line 24 collapsed to a single loop.

ftn-6332 ftn: VECTOR TIME_ALL, File = matrix.f90, Line = 24 
  A loop starting at line 24 was not vectorized because it does not map well onto the target architecture.

ftn-6066 ftn: SCALAR TIME_ALL, File = matrix.f90, Line = 25 
   A loop nest at line 25 collapsed to a single loop.

ftn-6332 ftn: VECTOR TIME_ALL, File = matrix.f90, Line = 25 
  A loop starting at line 25 was not vectorized because it does not map well onto the target architecture.

ftn-6288 ftn: VECTOR TIME_ALL, File = matrix.f90, Line = 30 
  A loop starting at line 30 was not vectorized because it contains a call to subroutine "matmul1" on line 31.

ftn-6288 ftn: VECTOR TIME_ALL, File = matrix.f90, Line = 43 
  A loop starting at line 43 was not vectorized because it contains a call to subroutine "matmul2" on line 44.

ftn-6288 ftn: VECTOR TIME_ALL, File = matrix.f90, Line = 56 
  A loop starting at line 56 was not vectorized because it contains a call to subroutine "matmul3" on line 57.

ftn-6288 ftn: VECTOR TIME_ALL, File = matrix.f90, Line = 69 
  A loop starting at line 69 was not vectorized because it contains a call to subroutine "matmul4" on line 70.

ftn-6288 ftn: VECTOR TIME_ALL, File = matrix.f90, Line = 82 
  A loop starting at line 82 was not vectorized because it contains a call to subroutine "matmul5" on line 83.

ftn-6066 ftn: SCALAR TEST_MATMUL1, File = matrix.f90, Line = 116 
   A loop nest at line 116 collapsed to a single loop.

ftn-6332 ftn: VECTOR TEST_MATMUL1, File = matrix.f90, Line = 116 
  A loop starting at line 116 was not vectorized because it does not map well onto the target architecture.

ftn-6066 ftn: SCALAR TEST_MATMUL1, File = matrix.f90, Line = 117 
   A loop nest at line 117 collapsed to a single loop.

ftn-6332 ftn: VECTOR TEST_MATMUL1, File = matrix.f90, Line = 117 
  A loop starting at line 117 was not vectorized because it does not map well onto the target architecture.

ftn-6288 ftn: VECTOR TEST_MATMUL1, File = matrix.f90, Line = 122 
  A loop starting at line 122 was not vectorized because it contains a call to subroutine "matmul1" on line 123.

ftn-6066 ftn: SCALAR TEST_MATMUL2, File = matrix.f90, Line = 155 
   A loop nest at line 155 collapsed to a single loop.

ftn-6332 ftn: VECTOR TEST_MATMUL2, File = matrix.f90, Line = 155 
  A loop starting at line 155 was not vectorized because it does not map well onto the target architecture.

ftn-6066 ftn: SCALAR TEST_MATMUL2, File = matrix.f90, Line = 156 
   A loop nest at line 156 collapsed to a single loop.

ftn-6332 ftn: VECTOR TEST_MATMUL2, File = matrix.f90, Line = 156 
  A loop starting at line 156 was not vectorized because it does not map well onto the target architecture.

ftn-6288 ftn: VECTOR TEST_MATMUL2, File = matrix.f90, Line = 161 
  A loop starting at line 161 was not vectorized because it contains a call to subroutine "matmul2" on line 162.

ftn-6066 ftn: SCALAR TEST_MATMUL3, File = matrix.f90, Line = 194 
   A loop nest at line 194 collapsed to a single loop.

ftn-6332 ftn: VECTOR TEST_MATMUL3, File = matrix.f90, Line = 194 
  A loop starting at line 194 was not vectorized because it does not map well onto the target architecture.

ftn-6066 ftn: SCALAR TEST_MATMUL3, File = matrix.f90, Line = 195 
   A loop nest at line 195 collapsed to a single loop.

ftn-6332 ftn: VECTOR TEST_MATMUL3, File = matrix.f90, Line = 195 
  A loop starting at line 195 was not vectorized because it does not map well onto the target architecture.

ftn-6288 ftn: VECTOR TEST_MATMUL3, File = matrix.f90, Line = 200 
  A loop starting at line 200 was not vectorized because it contains a call to subroutine "matmul3" on line 201.

ftn-6066 ftn: SCALAR TEST_MATMUL4, File = matrix.f90, Line = 233 
   A loop nest at line 233 collapsed to a single loop.

ftn-6332 ftn: VECTOR TEST_MATMUL4, File = matrix.f90, Line = 233 
  A loop starting at line 233 was not vectorized because it does not map well onto the target architecture.

ftn-6066 ftn: SCALAR TEST_MATMUL4, File = matrix.f90, Line = 234 
   A loop nest at line 234 collapsed to a single loop.

ftn-6332 ftn: VECTOR TEST_MATMUL4, File = matrix.f90, Line = 234 
  A loop starting at line 234 was not vectorized because it does not map well onto the target architecture.

ftn-6288 ftn: VECTOR TEST_MATMUL4, File = matrix.f90, Line = 239 
  A loop starting at line 239 was not vectorized because it contains a call to subroutine "matmul4" on line 240.

ftn-6066 ftn: SCALAR TEST_MATMUL5, File = matrix.f90, Line = 272 
   A loop nest at line 272 collapsed to a single loop.

ftn-6332 ftn: VECTOR TEST_MATMUL5, File = matrix.f90, Line = 272 
  A loop starting at line 272 was not vectorized because it does not map well onto the target architecture.

ftn-6066 ftn: SCALAR TEST_MATMUL5, File = matrix.f90, Line = 273 
   A loop nest at line 273 collapsed to a single loop.

ftn-6332 ftn: VECTOR TEST_MATMUL5, File = matrix.f90, Line = 273 
  A loop starting at line 273 was not vectorized because it does not map well onto the target architecture.

ftn-6288 ftn: VECTOR TEST_MATMUL5, File = matrix.f90, Line = 278 
  A loop starting at line 278 was not vectorized because it contains a call to subroutine "matmul5" on line 279.

ftn-6286 ftn: VECTOR PRINTTIMES, File = matrix.f90, Line = 308 
  A loop starting at line 308 was not vectorized because it contains input/output operations at line 309.

ftn-6286 ftn: VECTOR PRINTTIMES, File = matrix.f90, Line = 313 
  A loop starting at line 313 was not vectorized because it contains input/output operations at line 314.

ftn-6286 ftn: VECTOR PRINTTIMES, File = matrix.f90, Line = 318 
  A loop starting at line 318 was not vectorized because it contains input/output operations at line 319.

ftn-6286 ftn: VECTOR PRINTTIMES, File = matrix.f90, Line = 323 
  A loop starting at line 323 was not vectorized because it contains input/output operations at line 324.

ftn-3021 ftn: IPA MATMUL1, File = matrix.f90, Line = 335 
  "dgemm" was not inlined because the compiler was unable to locate the routine.

ftn-6332 ftn: VECTOR MATMUL2, File = matrix.f90, Line = 341 
  A loop starting at line 341 was not vectorized because it does not map well onto the target architecture.

ftn-6005 ftn: SCALAR MATMUL2, File = matrix.f90, Line = 341 
  A loop starting at line 341 was unrolled 4 times.

ftn-6289 ftn: VECTOR MATMUL3, File = matrix.f90, Line = 351 
  A loop starting at line 351 was not vectorized because a recurrence was found on "c" between lines 353 and 359.

ftn-6332 ftn: VECTOR MATMUL3, File = matrix.f90, Line = 352 
  A loop starting at line 352 was not vectorized because it does not map well onto the target architecture.

ftn-6005 ftn: SCALAR MATMUL3, File = matrix.f90, Line = 352 
  A loop starting at line 352 was unrolled 8 times.

ftn-6254 ftn: VECTOR MATMUL3, File = matrix.f90, Line = 356 
  A loop starting at line 356 was not vectorized because a recurrence was found on "c" at line 359.

ftn-6332 ftn: VECTOR MATMUL3, File = matrix.f90, Line = 358 
  A loop starting at line 358 was not vectorized because it does not map well onto the target architecture.

ftn-6005 ftn: SCALAR MATMUL3, File = matrix.f90, Line = 358 
  A loop starting at line 358 was unrolled 8 times.

ftn-6289 ftn: VECTOR MATMUL4, File = matrix.f90, Line = 371 
  A loop starting at line 371 was not vectorized because a recurrence was found on "c" between lines 373 and 378.

ftn-6332 ftn: VECTOR MATMUL4, File = matrix.f90, Line = 372 
  A loop starting at line 372 was not vectorized because it does not map well onto the target architecture.

ftn-6005 ftn: SCALAR MATMUL4, File = matrix.f90, Line = 372 
  A loop starting at line 372 was unrolled 8 times.

ftn-6254 ftn: VECTOR MATMUL4, File = matrix.f90, Line = 376 
  A loop starting at line 376 was not vectorized because a recurrence was found on "c" at line 378.

ftn-6005 ftn: SCALAR MATMUL4, File = matrix.f90, Line = 376 
  A loop starting at line 376 was unrolled 4 times.

ftn-6332 ftn: VECTOR MATMUL4, File = matrix.f90, Line = 377 
  A loop starting at line 377 was not vectorized because it does not map well onto the target architecture.

ftn-6005 ftn: SCALAR MATMUL4, File = matrix.f90, Line = 377 
  A loop starting at line 377 was unrolled 8 times.

ftn-6254 ftn: VECTOR MATMUL5, File = matrix.f90, Line = 390 
  A loop starting at line 390 was not vectorized because a recurrence was found on "c" at line 394.

ftn-6007 ftn: SCALAR MATMUL5, File = matrix.f90, Line = 391 
  A loop starting at line 391 was interchanged with the loop starting at line 393.

ftn-6332 ftn: VECTOR MATMUL5, File = matrix.f90, Line = 391 
  A loop starting at line 391 was not vectorized because it does not map well onto the target architecture.

ftn-6005 ftn: SCALAR MATMUL5, File = matrix.f90, Line = 391 
  A loop starting at line 391 was unrolled 8 times.

ftn-6254 ftn: VECTOR MATMUL5, File = matrix.f90, Line = 393 
  A loop starting at line 393 was not vectorized because a recurrence was found on "c" at line 394.

ftn-6005 ftn: SCALAR MATMUL5, File = matrix.f90, Line = 393 
  A loop starting at line 393 was unrolled 4 times.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  401.                 
  402.                 program matrix
  403.                 
  404.                   use timeit
  405.                   implicit none
  406.                   integer :: matrix_size,n_iter
  407.                 
  408.                 !  integer, parameter :: dp = kind(1.d0)
  409.                 
  410.                 matrix_size=1000
  411.                 n_iter=1
  412.  +              call time_all(matrix_size,n_iter)
  413.                 matrix_size=20
  414.                 n_iter=1000000
  415.  +              call time_all(matrix_size,n_iter)
  416.                 matrix_size=3
  417.                 n_iter=10000000
  418.  +              call time_all(matrix_size,n_iter)
  419.                 
  420.                 !matrix_size=1000
  421.                 !n_iter=1
  422.                 !call test_matmul1(matrix_size,n_iter)
  423.                 !call test_matmul2(matrix_size,n_iter)
  424.                 !call test_matmul3(matrix_size,n_iter)
  425.                 !call test_matmul4(matrix_size,n_iter)
  426.                 !call test_matmul5(matrix_size,n_iter)
  427.                 
  428.                 !####################################################################
  429.                 !End of executable statements.
  430.                 !####################################################################
  431.                 end program matrix

ftn-3165 ftn: IPA MATRIX, File = matrix.f90, Line = 412 
  "time_all"(/software/projects/pawsey0001/espinosa/pawseyTraining/Optimising-Serial-Code/compiler_reports/matrix.f90:7) was not inlined because of deferred implementation - ALLOCATE encountered in callee.

ftn-3165 ftn: IPA MATRIX, File = matrix.f90, Line = 415 
  "time_all"(/software/projects/pawsey0001/espinosa/pawseyTraining/Optimising-Serial-Code/compiler_reports/matrix.f90:7) was not inlined because of deferred implementation - ALLOCATE encountered in callee.

ftn-3165 ftn: IPA MATRIX, File = matrix.f90, Line = 418 
  "time_all"(/software/projects/pawsey0001/espinosa/pawseyTraining/Optimising-Serial-Code/compiler_reports/matrix.f90:7) was not inlined because of deferred implementation - ALLOCATE encountered in callee.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
